#!/bin/sh

nginx_cli()
{
  local _ignored_args=() _package_args=( "$@" ) _token index \
    _count=${#_package_args[@]} _domain

  service initialize

  if variables are empty domains
  then
    domains=()
  fi

  for (( index=0 ; index < $_count ; index++ ))
  do
    _token="${_package_args[$index]}"

    case "${_token}" in
      (domain)
        _domain="${_package_args[$((++index))]}"
        _domain="${_domain//,/ }"
        if variables are empty _domain
        then
          error "$FUNCNAME: a domain must follow keyword 'domain'"
        fi
        domains+=(${_domain})
        ;;
      (project)
        project="${_package_args[$((++index))]}"
        if variables are empty project
        then
          error "$FUNCNAME: a project name must follow keyword 'project'"
        fi
        ;;
      (user)
        project_user="${_package_args[$((++index))]}"
        if variables are empty project_user
        then
          error "$FUNCNAME: a project user name must follow keyword 'user'"
        fi
        ;;
      (path)
        project_path="${_package_args[$((++index))]}"
        if variables are empty project_path
        then
          error "$FUNCNAME: a project path name must follow keyword 'path'"
        fi
        ;;
      (force)
        force_flag=1
        true $((++index))
        ;;
      (edit)
        edit_flag=1
        true $((++index))
        ;;
      *)
        _ignored_args+=("${_token}")
        ;;
    esac
  done

  nginx_initialize "${_ignored_args[@]}"
}

nginx_initialize()
{
  # TODO: Allow overriding of these parameters via cli
  # These defaults may be overridden also by the nginx configuration files.
  configure_flags=(
  --prefix="${install_path}"
  --conf-path="${install_path}/etc/nginx/nginx.conf"
  --sbin-path="${install_path}/sbin/nginx"
  --pid-path="${install_path}/run/nginx.pid"
  --lock-path="${install_path}/run/nginx.lock"
  --http-client-body-temp-path="${install_path}/spool/client_body_temp"
  --http-proxy-temp-path="${install_path}/spool/proxy_temp"
  --http-fastcgi-temp-path="${install_path}/spool/fastcgi_temp"
  --http-log-path="${install_path}/log/access.log"
  --error-log-path="${install_path}/log/error.log"
  --with-http_ssl_module
  --with-http_stub_status_module
  )

  for _pkg in pcre zlib
  do
    if package is active ${_pkg}
    then
      configure_flags+=( --with-${_pkg}=${sm_path}/pkg/active )
    fi
  done

  package cli

  # TODO: Add a CLI --imap flag
  # --with-imap
  # --with-imap_ssl_module

  config_dirs=( conf servers users ssl )
  nginx_dirs=( log spool run lock etc/nginx tmp )
  nginx_files=( fastcgi.conf fastcgi.conf.default fastcgi_params
  fastcgi_params.default koi-utf koi-win mime.types mime.types.default
  nginx.conf.default scgi_params scgi_params.default uwsgi_params
  uwsgi_params.default win-utf
  )

  true \
    ${edit_flag:=0} \
    ${project_user:=${project}}

  master_pid="$(ps auxww | awk '/[n]ginx: master/{print $2}' | head -1)"
  service_flags=( -c "${service_config_path}/nginx.conf" )
  service_binary="${install_path}/sbin/nginx"
}

nginx_os_dependencies_install()
{
  warn "${action} is untested / unused thus far."

  if os is linux
  then
    if command exists pacman
    then
      pacman -S --noconfirm patch curl zlib pcre openssl make base-devel

    elif command exists apt-get
    then
      apt-get install build-essential openssl curl zlib1g zlib1g-dev libssl-dev pcre pcre-dev

    elif command exists yum
    then
      yum install -y gcc-c++ patch zlib zlib-devel openssl openssl-devel pcre pcre-devel

    elif command exists emerge
    then
      log "TODO: Tell wayne how to install pcre, openssl and zlib dev headers on gentoo."

    else
      log "TODO: Install zlib openssl pcre via curl, complile install."
    fi
  elif os is darwin
  then
    release="( $(sw_vers -productName) )"
    log "Notes for ${system} $release for OSX be sure to have the latest XCode tools. "
  fi
  echo
}

nginx_postinstall()
{
  if files exist "nginx.conf"
  then
    files move "nginx.conf" \
      to "${install_path}/etc/nginx/conf/nginx.conf.default" \
      from "${install_path}/etc/nginx"
  fi

  paths enter "${install_path}"
  paths create "${nginx_dirs[@]}"

  paths enter "${install_path}/etc/nginx"
  paths create "${config_dirs[@]}"

  # Cleanup default nginx install messy directory.
  files move "${nginx_files[@]}" \
    to "${install_path}/etc/nginx/conf" \
    from "${install_path}/etc/nginx"

  paths create "${install_path}/config" "${install_path}/etc/nginx/servers"
}

nginx_postactivate()
{
  user is root || return 0

  if (( ${force_flag:=0} ))
  then
    paths move \
      from "${service_config_path}" \
      to "${service_config_path}.${timestamp}"
  fi

  service setup # create user, etc... then calls nginx_service_setup

  if ! files exist "${service_config_path}/nginx.conf"
  then
    files link symbolic force \
      from "${install_path}/etc/nginx" \
      to "${service_config_path}"

    paths enter "${service_config_path}"

    files remove "${nginx_files[@]}"
  fi

  files link symbolic force \
    from "${install_path}/sbin/nginx" \
    to "${active_path}/sbin/nginx"
}

nginx_service_setup()
{
  templates install "nginx/nginx.conf" \
    to "${install_path}/etc/nginx/nginx.conf" \
    mode 0644 owner "${service_user}"

  templates seed "${install_path}/etc/nginx/nginx.conf" \
    modules_path "${modules_path}" \
    service "${service}" \
    service_user "${service_user}" \
    service_config_path "${service_config_path}" \
    service_pid_file "${service_pid_file}" \
    service_log_path "${service_log_path}"

  paths create "${install_path}/etc/nginx/health/"

  templates install "nginx/nginx.health" \
    to "${install_path}/etc/nginx/health/nginx.conf" \
    mode 0644 owner "${service_user}"

  templates install "nginx/nginx" \
    to "${install_path}/etc/nginx" \
    mode 0755 owner "${service_user}"

  templates=( "mime.types" "proxy.conf" )

  for template in "${templates[@]}"
  do
    templates install "nginx/${template}" \
      to "${install_path}/etc/nginx/conf/${template}" \
      mode 0644 owner "${service_user}"
  done

  paths enter "${install_path}"

  files replace content "^user .*;$" \
    with "# No user line for non-root installs "\
    in "${install_path}/etc/nginx/nginx.conf"

  paths chown recursive "${service_user}" "${nginx_dirs[@]}" "etc/nginx"
}

nginx_list()
{
  local line header="$(ps auxww | head -1)" master_list=() worker_list=()

  (( master_pid > 0 )) || succeed "No Nginx master processes was found."

  while read -r line
  do
    if [[ "$line" =~ nginx ]]
    then
      if [[ "$line" =~ master ]]
      then
        master_list+=("${line}")
      elif [[ "$line" =~ worker ]]
      then
        worker_list+=("${line}")
      fi
    fi
  done < <(ps auxww | awk '/[n]ginx/')

  echo "$header"

  for line in "${master_list[@]}"
  do
    echo "${line}"
  done

  for line in "${worker_list[@]}"
  do
    echo "${line}"
  done
}

nginx_configure_root_etc()
{
  (( force_flag )) || ! path exists "/etc/nginx" ||
    error "/etc/nginx already exists, in order to re-configure pass the force flag"

  paths create "/etc/nginx"

  # files copy to "/etc/nginx/" "${install_path}"/etc/nginx/*
  cp -Rf "${install_path}"/etc/nginx/* "/etc/nginx/"
}

nginx_conf_edit()
{
  if command exists vim
  then
    ${EDITOR:=vim}
  else
    ${EDITOR:=vi}
  fi
  export EDITOR

  ${EDITOR} "${service_config_path}/nginx.conf"
}

nginx_server_conf_edit()
{
  if command exists vim
  then
    ${EDITOR:=vim}
  else
    ${EDITOR:=vi}
  fi

  ${EDITOR} "${service_config_path}/servers/${project:-"${extension_args[0]}"}.conf"
}

nginx_server_new_cli()
{
  if variables are empty project
  then
    array shift extension_args project
  fi

  true ${project:=$1}

  if variables are empty project
  then
    fail "$FUNCNAME: project name must be given."
  fi

  nginx_cli
}

nginx_server_new()
{
  if ! templates exist "nginx/server.conf"
  then
    fail "$FUNCNAME: $extension_templates_path/server.conf template is missing."
  fi

  paths create "${service_config_path}/servers"

  # If this is running as root, ensure that Nginx can read from the
  # application directory.
  if user is root && path exists "/home/${project}"
  then
    path chmod 'g+rx' recursive "/home/${project}"
  fi

  project_config="${service_config_path}/servers/${project}.conf"

  if (( force_flag == 1 )) && file_exists "${project_config}"
  then
    remove_file "${project_config}"
  fi

  if ! files exist "${project_config}"
  then
    templates install "nginx/server.conf" \
      to "${project_config}"
  fi

  if array is empty domains
  then
    domains=("${project}.com" "*.${project}.com")
  fi

  if files exist "${project_config}"
  then
    templates seed "${project_config}" \
      modules_path "${modules_path}" \
      service "${service}" \
      project "${project}" \
      domains "${domains[*]}" \
      project_path ${project_path:="/home/${project_user:-${project}}"} \
      project_user "${project_user}" \
      service_config_path "${service_config_path}" \
      service_pid_file "${service_pid_file}" \
      service_log_path "${service_log_path}"
  fi
}

nginx_restart()
{
  if (( master_pid > 0 ))
  then
    kill -HUP $master_pid
  else
    service restart
  fi
}

nginx_config_check()
{
  "${service_binary}" -t -c "${service_config_path}/nginx.conf"
}

