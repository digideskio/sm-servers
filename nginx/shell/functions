#!/bin/sh

nginx_cli()
{
  trace_filter nginx || set -o xtrace
  local _ignored_args _package_args _token index _count _domain __domain
  _ignored_args=()
  _package_args=( "$@" )
  _count=${#_package_args[@]}

  service initialize

  if variable is empty domains
  then domains=() ; fi

  for (( index=0 ; index < $_count ; index++ ))
  do
    _token="${_package_args[$index]}"

    case "${_token}" in
      (domain)
        _domain="${_package_args[$((++index))]}"
        _domain="${_domain//,/ }"
        if variable is empty _domain
        then
          error "$FUNCNAME: a domain must follow keyword 'domain'"
        fi
        for __domain in ${_domain}
        do
          if ! __sm.string.contains "${__domain}" "${domains[*]}"
          then
            domains+=( "${__domain}" )
          fi
        done
        ;;
      (project)
        project="${_package_args[$((++index))]}"
        if variable is empty project
        then
          error "$FUNCNAME: a project name must follow keyword 'project'"
        fi
        ;;
      (user)
        project_user="${_package_args[$((++index))]}"
        if variable is empty project_user
        then
          error "$FUNCNAME: a project user name must follow keyword 'user'"
        fi
        ;;
      (path)
        project_path="${_package_args[$((++index))]}"
        if variable is empty project_path
        then
          error "$FUNCNAME: a project path name must follow keyword 'path'"
        fi
        ;;
      (force)
        force_flag=1
        true $((++index))
        ;;
      (edit)
        edit_flag=1
        true $((++index))
        ;;
      *)
        _ignored_args+=("${_token}")
        ;;
    esac
  done
}

nginx_server_new_cli()
{
  trace_filter nginx || set -o xtrace

  if variable is empty project
  then
    array shift extension_args variable project
  fi

  true ${project:=$1}

  if variable is empty project
  then
    log fail "$FUNCNAME: project name must be given."
  fi

  nginx_cli
}

# Hook before package is configured
nginx_preconfigure()
{
  trace_filter nginx || set -o xtrace
  typeset -ga configure_flags config_dirs nginx_dirs nginx_files
  typeset -g master_pid service_binary
  typeset pcre zlib openssl

  rm -rf ${src_path}/nginx_tcp_proxy_module*

  # TODO: Allow overriding of these parameters via cli
  # These defaults may be overridden also by the nginx configuration files.
  configure_flags=(
  --prefix="${install_path}"
  --conf-path="${install_path}/etc/nginx/nginx.conf"
  --sbin-path="${install_path}/sbin/nginx"
  --pid-path="${install_path}/run/nginx.pid"
  --lock-path="${install_path}/run/nginx.lock"
  --http-client-body-temp-path="${install_path}/spool/client_body_temp"
  --http-proxy-temp-path="${install_path}/spool/proxy_temp"
  --http-fastcgi-temp-path="${install_path}/spool/fastcgi_temp"
  --http-log-path="${install_path}/log/access.log"
  --error-log-path="${install_path}/log/error.log"
  --with-pcre
  --with-ipv6 
  --with-http_ssl_module
  --with-http_stub_status_module
  --with-ld-opt="-L${sm_path}/pkg/active/lib "
  --with-cc-opt="-I${sm_path}/pkg/active/include "
  )

  # TCP Proxy Module - TODO: Add a CLI --tcp-proxy flag to toggle this.
  curl -L https://github.com/yaoweibin/nginx_tcp_proxy_module/archive/master.zip \
    -o ${src_path}/nginx_tcp_proxy_module.zip
  unzip -q ${src_path}/nginx_tcp_proxy_module.zip -d ${src_path}/
  mv ${src_path}/nginx_tcp_proxy_module-master ${src_path}/nginx_tcp_proxy_module
  configure_flags+=( --add-module="${src_path}/nginx_tcp_proxy_module" )

  patch -p1 < ${src_path}/nginx_tcp_proxy_module/tcp.patch &> patch.log

  # TODO: Add a CLI --imap flag
  # --with-imap
  # --with-imap_ssl_module
}


# Hook after installation of nginx package
nginx_postinstall()
{
  trace_filter nginx || set -o xtrace

  local _path

  if file exists "nginx.conf"
  then
    file move "${install_path}/etc/nginx.conf" \
      to "${install_path}/etc/nginx/conf/nginx.conf.default" \
      from "${install_path}/etc/nginx"
  fi

  path enter "${install_path}"
  paths create "${nginx_dirs[@]}"

  path enter "${install_path}/etc/nginx"
  paths create "${config_dirs[@]}"

  # Cleanup default nginx install messy directory.
  files move "${nginx_files[@]}" \
    to "${install_path}/etc/nginx/conf" \
    from "${install_path}/etc/nginx"

  paths create "${install_path}/config"
}

# Hook after activation of nginx package
nginx_postactivate()
{
  trace_filter nginx || set -o xtrace

  if user is not root
  then
    return 0
  fi

  service setup # create user, etc... then calls nginx_service_setup

  if ! file exists "${service_config_path}/nginx.conf"
  then
    if path exists "${service_config_path}"
    then
      path move \
        from "${service_config_path}" \
        to "${service_config_path}.${timestamp}"
    fi
    mkdir -p ${service_config_path}
    cp -R ${install_path}/etc/nginx/* ${service_config_path}
  fi

  mkdir -p ${service_log_path}

  file link symbolic force \
    from "${install_path}/sbin/nginx" \
    to "${active_path}/sbin/nginx"
}

nginx_service_setup()
{
  trace_filter nginx || set -o xtrace
  typeset templates template

  template install "nginx/nginx.conf" \
    to "${install_path}/etc/nginx/nginx.conf" \
    mode 0644 \
    owner "${service_user}" \
    with \
    modules_path "${modules_path}" \
    service "${service}" \
    service_user "${service_user}" \
    service_config_path "${service_config_path}" \
    service_pid_file "${service_pid_file}" \
    service_log_path "${service_log_path}"


  template install "nginx/nginx.http.conf" \
    to "${install_path}/etc/nginx/http.conf" \
    mode 0644 \
    owner "${service_user}" \
    with \
    modules_path "${modules_path}" \
    service "${service}" \
    service_user "${service_user}" \
    service_config_path "${service_config_path}" \
    service_pid_file "${service_pid_file}" \
    service_log_path "${service_log_path}"

  template install "nginx/nginx.tcp.conf" \
    to "${install_path}/etc/nginx/tcp.conf" \
    mode 0644 \
    owner "${service_user}" \
    with \
    modules_path "${modules_path}" \
    service "${service}" \
    service_user "${service_user}" \
    service_config_path "${service_config_path}" \
    service_pid_file "${service_pid_file}" \
    service_log_path "${service_log_path}"

  paths create "${install_path}/etc/nginx/health/" "${install_path}/etc/nginx/tcp/"

  templates install "nginx/nginx.health" \
    to "${install_path}/etc/nginx/health/nginx.conf" \
    mode 0644 owner "${service_user}"

  # NOTE: This was the init.d script originally
  # templates install "nginx/init.d" \
  # to "${install_path}/etc/init.d/nginx" \
  #  mode 0755 owner "${service_user}"

  templates=( "mime.types" "proxy.conf" )

  for template in "${templates[@]}"
  do
    template install "nginx/${template}" \
      to "${install_path}/etc/nginx/conf/${template}" \
      mode 0644 \
      owner "${service_user}"
  done

  path enter "${install_path}"

  file replace \
    regexp "^user .*;$" \
    with "# No user line for non-root installs" \
    in "${install_path}/etc/nginx/nginx.conf"

  for dir in "${nginx_dirs[@]}" "etc/nginx"
  do paths chown "${service_user}" recursively ${install_path}/${dir}
  done
}

nginx_os_dependencies_install()
{
  trace_filter nginx || set -o xtrace
  warn "${action} is untested / unused thus far."

  if os is linux
  then
    if command exists pacman
    then pacman -S --noconfirm patch curl zlib pcre openssl make base-devel

    elif command exists apt-get
    then apt-get install build-essential openssl curl zlib1g zlib1g-dev libssl-dev libpcre3-dev

    elif command exists yum
    then yum install -y gcc-c++ patch zlib zlib-devel openssl openssl-devel pcre pcre-devel

    elif command exists emerge
    then log "TODO: Tell wayne how to install pcre, openssl and zlib dev headers on gentoo."

    else log "TODO: Install zlib openssl pcre via curl, complile install."
    fi
  elif os is darwin
  then
    release="( $(sw_vers -productName) )"
    log "Notes for ${system} $release for OSX be sure to have the latest XCode tools. "
  fi
  echo
}


nginx_start()
{
  if [[ ${master_pid:-0} -gt 0 ]] 
  then
    log "It appears that Nginx ($master_pid) is already running\n(from pidfile: $nginx_pid)"
  else
    # TODO: Pass through the --pid and --log here.
    nginx -c "$nginx_conf"
    result=$?
    if [[ $result -eq 0 ]] 
    then touch $nginx_lock
    else fail "Could not start Nginx server using config file ${nginx_conf}"
    fi
  fi
}

succeed() { log "$*" ; exit 0 ; }

fail() { log "ERROR: $*" ; exit 1 ; }

usage() {
  log "
  Usage:

    $0 start stop restart reload log shutdown check help [options]

  Options:

    --confd - Path to conf.d file, optional
    --path  - Path to configuration files
    --conf  - Path to nginx.conf
    --pid   - Path to nginx pidfile
    --log   - Path to nginx logs
    --bin   - Path to nginx binary
    --lock  - Path to nginx startup lock file

  Description:

    start    - Start Nginx
    stop     - Stop Nginx
    restart  - Restart Nginx
    reload   - Reload Nginx configuration files in running nginx
    log      - Reopen log files in running nginx
    shutdown - Gracefully shut down workers
    check    - Check Nginx configuration for errors
    help     - Display this usage information
"
}

