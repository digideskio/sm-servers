#!/usr/bin/env bash

nginx_install_dependencies() {
warn "${action} is untested / unused thus far."

if os_is_linux
then
  if command_exists pacman
  then
    pacman -S --noconfirm patch curl zlib pcre openssl make base-devel

  elif command_exists apt-get
  then
    apt-get install build-essential openssl curl zlib1g zlib1g-dev libssl-dev pcre pcre-dev

  elif command_exists yum
  then
    yum install -y gcc-c++ patch zlib zlib-devel openssl openssl-devel pcre pcre-devel

  elif command_exists emerge
  then
    log "TODO: Tell wayne how to install pcre, openssl and zlib dev headers on gentoo."

  else
    log "TODO: Install zlib openssl pcre via curl, complile install."

  fi
elif os_is_darwin
then
  release="( $(sw_vers -productName) )"

  log "
  Notes for ${system} $release
  For Snow Leopard be sure to have Xcode Tools Version 3.2.1 (1613) or later
    You should download the latest Xcode tools from developer.apple.com.
    (This is since the dvd install for Snow Leopard contained bugs).
    "
fi
echo
}

nginx_postinstall()
{
  enter "${install_path}"
  ensure_paths_exist "${nginx_dirs[@]}"

  enter "${install_path}/etc/nginx"
  ensure_paths_exist "${config_dirs[@]}"

  # Cleanup default nginx install messy directory.
  move_files --if-exists "${nginx_files[@]}" to "${install_path}/etc/nginx/conf" \
   from "${install_path}/etc/nginx"

  ensure_paths_exist "${install_path}/config" "${install_path}/etc/nginx/servers"

}

nginx_postactivate()
{
  if user_is_root
  then
    if (( ${force_flag:=0} == 1 ))
    then
      remove_paths "${service_config_path}"
    fi

    if ! file_exists "${service_config_path}/nginx.conf"
    then
      link --force "${install_base_path}/active/etc/nginx" \
        "${service_config_path}"

      enter "${service_config_path}"

      # TODO: add from parameter from remove_files
      remove_files "${nginx_files[@]}"
    fi

    link --force "${install_base_path}/active/sbin/nginx" \
      "${active_path}/sbin/nginx"
  fi
}


nginx_service_setup()
{
  install_template "nginx/nginx.conf" to "${install_path}/etc/nginx/nginx.conf" \
    mode 0644 owner "${service_user}"

  seed_template "${install_path}/etc/nginx/nginx.conf" \
    modules_path "${modules_path}" \
    service "${service}" \
    service_user "${service_user}" \
    service_config_path "${service_config_path}" \
    service_pid_file "${service_pid_file}" \
    service_log_path "${service_log_path}"

  ensure_paths_exist "${install_path}/etc/nginx/health/"

  install_template "nginx/nginx.health" \
    to "${install_path}/etc/nginx/health/nginx.conf" \
    mode 0644 owner "${service_user}"

  install_template "nginx/nginx" to "${install_path}/etc/nginx" \
    mode 0755 owner "${service_user}"

  templates=( "mime.types" "proxy.conf" )

  for template in "${templates[@]}"
  do
    install_template "nginx/${template}" \
      to "${install_path}/etc/nginx/conf/${template}" \
      mode 0644 owner "${service_user}"
  done

  enter "${install_path}"

  replace_content "^user .*;$" with "# No user line for non-root installs "\
    in "${install_path}/etc/nginx/nginx.conf"

  chown_paths --recursive "${service_user}" "${nginx_dirs[@]}" "etc/nginx"
}

nginx_list()
{
  local master_list=("$(ps auxww | head -1)") worker_list=()

  if (( master_pid > 0 ))
  then
    while read -r line
    do
      if [[ "$line" =~ nginx ]]
      then
        if [[ "$line" =~ master ]]
        then
          master_list+=("${line}")
        elif [[ "$line" =~ worker ]]
        then
          worker_list+=("${line}")
        fi
      fi
    done < <(ps auxww | awk '/[n]ginx/')

    array_join master_list "\n"
    echo
    array_join worker_list "\n"
    echo
  else
    log "No Nginx master processes was found."
  fi
}


