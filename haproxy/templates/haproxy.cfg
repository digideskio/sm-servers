#!/bin/sh

# HAProxy Configuration File
global
	user haproxy
	group haproxy
	daemon
	spread-checks 5
	log 127.0.0.1 local0
	log 127.0.0.1 local1 notice
	maxconn 15000
	ulimit-n 80013
	ca-base /etc/ssl
	crt-base /etc/ssl
	pidfile /var/run/haproxy/haproxy.pid
	stats socket /var/run/haproxy/haproxy.stat mode 0600
	# debug

defaults
	log global
	mode http
	contimeout 4000
	clitimeout 4200
	srvtimeout 4300
	balance roundrobin

	option abortonclose # abort request if client closes output channel while waiting
	option httpclose # add "Connection:close" header if it is missing
	option httplog
	option forwardfor # insert x-forwarded-for header so that app servers can see both proxy and client IPs
	option redispatch # any server can handle any session
	option forwardfor # Set X-Forwarded-For header.
	option http-server-close
	retries 3
	option redispatch
	http-check siable-on-404

	# Configure Timeouts
	timeout check 5s
	timeout connect 9s
	timeout client 30s
	timeout server 60s
	timeout tunnel 1h # Long timeout for gopher style WebSocket connections.

	stats enable
	stats realm Haproxy\ Statistics
	stats auth admin:nimda
	stats uri /services/haproxy/stats
	monitor-uri /services/haproxy/health # Returns 200 if up
	# errorfile 503 /etc/haproxy/html/503.html

userlist admins
	# user myusername insecure-password mypassword

frontend restricted_cluster
	# acl auth_tintoretto http_auth(admins)
	# http-request auth realm ShareaholicRestricted

frontend http
	bind :80
	# Redirect all HTTP traffic to HTTPS
	redirect scheme https if !{ ssl_fc }

frontend https
	bind *:8443 accept-proxy
	reqadd X-Forwarded-Proto:\ https

	# Example with CA certificate bundle
	# bind :443 ssl crt cert.pem ca-file bundle.crt
	# Example without CA certification bunch

	# If you wanted to specifically send websocket traffic somewhere different
	# you'd use an ACL like { hdr(Upgrade) -i WebSocket }. 
	#use_backend gopher if { path_beg /go/pher/ }
	#bind :443 ssl crt snakeoil.pem

	# ACL Example: Blog traffic goes to blog
	# acl blog path_beg /blog
	# use_backend blogengine if blog

	acl api path /api /api/

	acl nginx hdr_dom(host) -i a.domain.com
	acl nginx hdr_dom(host) -i another.domain.com
	acl nginx hdr_dom(host) -i yet.another.domain.com

	use_backend gopher if api

	default_backend nginx

backend nginx
	option httpchk /services/nginx/health

	# Tell the backend that this is a secure connection,
	# even though it's getting plain HTTP.
	reqadd X-Forwarded-Proto:\ https
	
	balance leastconn
	# Check by hitting a page intended for this use.
	option httpchk GET /isrunning
	timeout check 500ms
	# Wait 500ms between checks.
	server nginx1 127.0.0.1:8080
	server nginx1 127.0.0.1:8081

backend gopher
	# Tell the backend that this is a secure connection, even though plain HTTP.
	reqadd X-Forwarded-Proto:\ https
	
	balance leastconn
	# Check by hitting a page intended for this use.
	option httpchk GET /go/pher/health/check
	timeout check 500ms
	# Wait 500ms between checks.
	server gophera 127.0.0.1:10000 check inter 500ms fastinter 1000 fall 1 rise 1 weight 1 # maxconn 100
	server gopherb 127.0.0.1:10001 check inter 500ms fastinter 1000 fall 1 rise 1 weight 1 # maxconn 100
	server gopherc 127.0.0.1:10002 check inter 500ms fastinter 1000 fall 1 rise 1 weight 1 # maxconn 100
	server gopherd 127.0.0.1:10003 check inter 500ms fastinter 1000 fall 1 rise 1 weight 1 # maxconn 100

# For displaying HAProxy statistics.
frontend stats
	# HTTPS only.
	# Example with CA certificate bundle
	# bind :1936 ssl crt star.mysite.com.pem ca-file gd_bundle.crt
	# Example without CA certification bunch
	bind :1936 ssl crt star.mysite.com.pem
	default_backend stats
	
backend stats
	stats enable
	stats hide-version
    stats show-node
	stats realm Haproxy\ Statistics
	stats uri /service/haproxy/stats
	stats auth admin:n1md@

